#!/usr/bin/lua
http = require("ssl.https")
json = require("cjson")
require("uci")
log = require("posix.syslog")
swf = require("swf")

GATEWAY_TOKEN = swf.gateway_token()

state = uci.cursor(nil, "/var/state")

URL="https://api.fbwifi.com/v2.0/gateway"
body, code, headers = http.request(URL.."?access_token="..GATEWAY_TOKEN.."&fields=config,config_version")

if code == 200 then
	log.syslog(log.LOG_INFO, "[swf] Got gateway config ("..code..")")
else
	log.syslog(log.LOG_CRIT, "[swf] Failed to get gateway config ("..code..")")
	os.exit(1)
end

obj = json.decode(body)

function save_cert(name, value)
	log.syslog(log.LOG_INFO, "[swf] Saving cert "..name)
	local f = assert(io.open("/etc/swf/"..name, "w"))
	f:write(value)
	f:close()
end

function process_redirect(ix, host)
	IP_SET = "ip addr add dev br-lan "..host
	local result = os.execute(IP_SET)
	if result == 0 then
		log.syslog(log.LOG_INFO, "[swf] Redirect address applied "..host)
	else
		log.syslog(log.LOG_WARNING, "[swf] Failed to apply redirect address "..host)
	end

	ip = string.match(host, '([0-9\.]*)/([0-9]*)')
	RULE_FMT="grep -q \"%s\" /etc/hosts || echo \"%s\tstar.fbwifigateway.net\" >> /etc/hosts"
	HOSTS_RULE = string.format(RULE_FMT, ip, ip)
	result = os.execute(HOSTS_RULE)
	if result == 0 then
		log.syslog(log.LOG_INFO, "[swf] Cached redirect host for DNS")
	else
		log.syslog(log.LOG_WARNING, "[swf] Failed to amend /etc/hosts")
		log.syslog(log.LOG_INFO, "[swf] "..HOSTS_RULE)
	end

	result = os.execute("iptables -t nat -A HOST_REDIRLIST -p tcp --dport 80 -d "..ip.." -j ACCEPT # REDIRECT --to-ports 2060")
	--print(result)
	result = os.execute("iptables -t nat -A HOST_REDIRLIST -p tcp --dport 443 -d "..ip.."  -j ACCEPT # REDIRECT --to-ports 2061")
	--print(result)
end

save_cert("https_server_cert", obj['config']['https_server_cert'])
save_cert("https_server_key", obj['config']['https_server_key'])

table.foreach(obj['config']['host_redirect_ips'], process_redirect)

RULE_FORMAT = "iptables -t mangle -A TRAFFIC_ALLOWLIST -d %s -p %s --dport %s -j MARK --set-mark 0xfb"
function process_traffic_rule(ix, rule)
	log.syslog(log.LOG_INFO, "[swf] Traffic rule "..ix)
	
	if rule["protocol"] == 6 then
		PROTO = "tcp"
	elseif rule["protocol"] == 17 then
		PROTO = "udp"
	end
	RULE = string.format(RULE_FORMAT, rule["ip"], PROTO, rule["port"])
	local result = os.execute(RULE)
	if result == 0 then
		log.syslog(log.LOG_INFO, "[swf] Traffic rule "..ix)
	else
		log.syslog(log.LOG_WARNING, "[swf] Failed to install traffic rule ; "..RULE)
	end
end

local cross_origin_list = {}
function process_cross_origin_rule(ix, url)
	log.syslog(log.LOG_INFO, "[swf] Cross origin rule "..url)
	table.insert(cross_origin_list, url)
end

function process_url(url_purpose, fqdn)
	log.syslog(log.LOG_INFO, "[swf] Caching "..url_purpose)
	state:set("swf", "main", url_purpose, fqdn)	
end

state:set("swf", "main", "config")

table.foreach(obj['config']['traffic_allowlist'], process_traffic_rule)
table.foreach(obj['config']['cross_origin_allowlist'], process_cross_origin_rule)
table.foreach(obj['config']['urls'], process_url)
state:set("swf", "main", "cross_origin_allow_rules", cross_origin_list)

state:set("swf", "main", "config_version", obj['config_version'])
state:save('swf')
