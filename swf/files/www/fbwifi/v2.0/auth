#!/usr/bin/lua
require("uci")
log = require("posix.syslog")
swf = require("swf")

state = uci.cursor(nil, "/var/state")

method = os.getenv("REQUEST_METHOD")
if method == 'GET' then
	print("Status: 302")
	print("Location: "..state:get("swf", "main", "landing_page_url"))
	print ('\n')

elseif method == 'POST' then
	local token
	
	os.execute("set > /tmp/cgi_env")
	print ('\n')

	form_data=io.read()
	while form_data do
		token = string.match(form_data, '[%d]+')
		if string.len(token or '') > 14 then

			client = os.getenv("REMOTE_ADDR")
			f = io.popen("awk '/"..client.."/ { printf(\"%s\", $4) }' /proc/net/arp", 'r')
			client_mac = assert(f:read('*a'))
			state_name = "client_" .. string.gsub( client_mac, ':', "" )

			RULE_COND="iptables -w -L CLIENT_TO_INTERNET -t mangle | grep -i -q \"%s\""
			RULE_FMT="iptables -w -t mangle -%s CLIENT_TO_INTERNET -m mac --mac-source \"%s\" -j MARK --set-mark 0xfb"
			local RULE

			if swf.validate_token(token) then
				
				log.syslog(log.LOG_INFO, "[swf] Validated client "..client_mac)
				state:set("swf", state_name, "client")
				state:set("swf", state_name, "token", token)
				state:set("swf", state_name, "authenticated", "true")
				
				-- verify a rule exists for the given client MAC, OR install it
				RULE=string.format(RULE_COND.." || "..RULE_FMT, client_mac, "A", client_mac)

			else
				log.syslog(log.LOG_INFO, "[swf] Invalid client "..client)
				state:delete("swf", state_name)

				-- verify a rule exists for the given client MAC, AND delete it
				RULE=string.format(RULE_COND.." && "..RULE_FMT, client_mac, "D", client_mac)
			end

			res = os.execute(RULE)
			if res ~= 0 then 
				log.syslog(log.LOG_WARNING, string.format( "[swf] Failed to update iptables (%s)", res ) )
				log.syslog(log.LOG_INFO, "[swf] "..RULE)
			end
			state:save('swf')
		end

		form_data=io.read()
	end
end
